#!/bin/bash

### BEGIN INIT INFO
# Provides:          camo
# Required-Start:    $remote_fs $named $syslog
# Required-Stop:     $remote_fs $named $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: DEBIAN initscript for camo image proxy
# Description:       Camo is all about making insecure assets look secure.
#                    This is an SSL image proxy to prevent mixed content
#                    warnings on secure pages.
### END INIT INFO

export PORT=<%= @camo_port %>
export CAMO_HEADER_VIA=<%= @camo_header_via %>
export CAMO_KEY=<%= @camo_key %>
export CAMO_LENGTH_LIMIT=<%= @camo_length_limit %>
export CAMO_LOGGING_ENABLED=<%= @camo_logging %>
export CAMO_MAX_REDIRECTS=<%= @camo_mx_redirects %>
export CAMO_SOCKET_TIMEOUT=<%= @camo_timeout %>
export CAMO_TIMING_ALLOW_ORIGIN=<%= @camo_timing_cors %>
export CAMO_HOSTNAME=<%= @camo_hostname %>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DAEMON_ARGS="<%= @camo_dir %>/server.js"
LOG_FILE="<%= @camo_dir %>/log/camo.log"
DESC="camo image proxy"
NODEUSER=c2corg
NODE=nodejs
DAEMON=$(which $NODE)

THIS_ARG=$0
INIT_SCRIPT_NAME=`basename $THIS_ARG`
[ -h $THIS_ARG ] && INIT_SCRIPT_NAME=`basename $(readlink $THIS_ARG)` # in case of symlink
INIT_SCRIPT_NAME_NOEXT=${INIT_SCRIPT_NAME%.*}                            
PIDFILE="/var/run/$INIT_SCRIPT_NAME_NOEXT.pid"
SCRIPTNAME=/etc/init.d/$INIT_SCRIPT_NAME

[ -x "$DAEMON" ] ||  { echo "can't find node.js"  >&2; exit 0; }

[ -r /etc/default/$INIT_SCRIPT_NAME ] && . /etc/default/$INIT_SCRIPT_NAME

. /lib/init/vars.sh
. /lib/lsb/init-functions

do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started
  start-stop-daemon --start --quiet --pidfile $PIDFILE --chuid $NODEUSER --background --exec $DAEMON --test > /dev/null \
    || { log_progress_msg " (already running)"; return 1; }
  start-stop-daemon --start --quiet --chuid $NODEUSER --make-pidfile --pidfile $PIDFILE --background \
    --startas /bin/bash -- -c "exec $DAEMON $DAEMON_ARGS >> $LOG_FILE 2>&1" \
    || { return 2; }
}

do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE  --chuid $NODEUSER --name $NODE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  start-stop-daemon --stop --quiet --oknodo --retry=0/3/KILL/5 --pidfile $PIDFILE  --chuid $NODEUSER --exec $DAEMON -- $DAEMON_ARGS
  [ "$?" = 2 ] && return 2
  # Nodejs won't delete pidfile by itself
  rm -f $PIDFILE
  [ "$RETVAL" = 1 ] && log_progress_msg " (not running)"
  return "$RETVAL"
}

do_status()
{
  # 0 program is running or service is OK
  # 1 program is dead and /var/run pid file exists
  # (2 program is dead and /var/lock lock file exists) (not used here)
  # 3 program is not running
  # 4 program or service status is unknown
  RUNNING=$(running)
  
  # $PIDFILE corresponds to a live $NAME process
  ispidactive=$(pidof $NAME | grep `cat $PIDFILE 2>&1` >/dev/null 2>&1)
  ISPIDACTIVE=$?

  if [ -n "$RUNNING" ]; then
    if [ $ISPIDACTIVE ]; then 
      log_success_msg "$INIT_SCRIPT_NAME_NOEXT is running"
      exit 0      
    fi
  else
    if [ -f $PIDFILE ]; then
      log_success_msg "$INIT_SCRIPT_NAME_NOEXT is not running, phantom pidfile $PIDFILE"
      exit 1
    else
      log_success_msg "$INIT_SCRIPT_NAME_NOEXT is not running"
      exit 3
    fi
  fi
  
}

running() {
  RUNSTAT=$(start-stop-daemon --start --quiet --pidfile $PIDFILE --chuid $NODEUSER --background --exec $DAEMON --test > /dev/null)
  if [ "$?" = 1 ]; then
    echo y
  fi
}

case "$1" in
  start)
    log_begin_msg "Starting $DESC"
    do_start
    case "$?" in
      0|1) log_end_msg 0 ;;
      2)   log_end_msg 1 ;;
    esac
  ;;
  stop)
    log_begin_msg "Stopping $DESC"
    do_stop
    case "$?" in
      0|1) log_end_msg 0 ;;
      2)   log_end_msg 1 ;;
    esac
  ;;
  restart|force-reload)
    log_begin_msg "Restarting $DESC"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1 ;; # Old process is still running
          *) log_end_msg 1 ;; # Failed to start
        esac
      ;;
      *)
        # Failed to stop
        log_end_msg 1
      ;;
    esac
  ;;
  status)
    do_status
  ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
    exit 3
  ;;
esac

exit 0
